{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udfdd Simplify Cloud Native Microservices development base on FastAPI and gRPC. Introduction Bali is a framework integrate FastAPI and gRPC. If you want to provide both HTTP and RPC, it can improve development efficiency. It gives you the following features: A simple layout of file structure rule. Integrated SQLAlchemy ORM and provide generic model methods. Utilities of transform models to Pydantic schemas. GZipMiddleware included and GZip decompression enabled. \ud83c\udf7b Resource layer to write code once support both HTTP and RPC Who's using bali framework Requirements Python 3.7+ FastAPI 0.63+ grpcio>=1.32.0,<1.42 Installation # Bali framework pip install bali-core # Bali command line tool pip install bali-cli","title":"Introduction"},{"location":"#_1","text":"\ud83c\udfdd Simplify Cloud Native Microservices development base on FastAPI and gRPC.","title":""},{"location":"#introduction","text":"Bali is a framework integrate FastAPI and gRPC. If you want to provide both HTTP and RPC, it can improve development efficiency. It gives you the following features: A simple layout of file structure rule. Integrated SQLAlchemy ORM and provide generic model methods. Utilities of transform models to Pydantic schemas. GZipMiddleware included and GZip decompression enabled. \ud83c\udf7b Resource layer to write code once support both HTTP and RPC","title":"Introduction"},{"location":"#whos-using-bali-framework","text":"","title":"Who's using bali framework"},{"location":"#requirements","text":"Python 3.7+ FastAPI 0.63+ grpcio>=1.32.0,<1.42","title":"Requirements"},{"location":"#installation","text":"# Bali framework pip install bali-core # Bali command line tool pip install bali-cli","title":"Installation"},{"location":"application/","text":"Application Create Application import greeter_server # Initialized App app = Bali () # Updated settings app . settings ( base_settings = { 'title' : 'Bali App' }) Launch # lauch RPC python main.py --rpc # lauch HTTP python main.py --http More usage of Application : example","title":"Application"},{"location":"application/#application","text":"Create Application import greeter_server # Initialized App app = Bali () # Updated settings app . settings ( base_settings = { 'title' : 'Bali App' }) Launch # lauch RPC python main.py --rpc # lauch HTTP python main.py --http More usage of Application : example","title":"Application"},{"location":"cache/","text":"Cache Cache API from bali.core import cache # Usage example (API) # Read cache cache . get ( key ) # Set cache cache . set ( key , value , timeout = 10 ) cache memoize # Import the cache_memoize from bali core from bali.core import cache_memoize # Attach decorator to cacheable function with a timeout of 100 seconds. @cache_memoize ( 100 ) def expensive_function ( start , end ): return random . randint ( start , end )","title":"Cache"},{"location":"cache/#cache","text":"","title":"Cache"},{"location":"cache/#cache-api","text":"from bali.core import cache # Usage example (API) # Read cache cache . get ( key ) # Set cache cache . set ( key , value , timeout = 10 )","title":"Cache API"},{"location":"cache/#cache-memoize","text":"# Import the cache_memoize from bali core from bali.core import cache_memoize # Attach decorator to cacheable function with a timeout of 100 seconds. @cache_memoize ( 100 ) def expensive_function ( start , end ): return random . randint ( start , end )","title":"cache memoize"},{"location":"database/","text":"Database connect from bali.core import db # connect to database when app started # db is a sqla-wrapper instance db . connect ( 'DATABASE_URI' ) Declarative mode with sqla-wrapper class User ( db . Model ): __tablename__ \"users\" id = db . Column ( db . Integer , primary_key = True ) ... db . create_all () db . add ( User ( ... )) db . commit () todos = db . query ( User ) . all () More convenient usage, ref to SQLA-Wrapper Declare models inherit from convenient base models BaseModel # using BaseModel class User ( db . BaseModel ): __tablename__ \"users\" id = db . Column ( db . Integer , primary_key = True ) ... # BaseModel's source code class BaseModel ( db . Model ): __abstract__ = True created_time = Column ( DateTime ( timezone = True ), default = datetime . utcnow ) updated_time = Column ( DateTime ( timezone = True ), default = datetime . utcnow , onupdate = datetime . utcnow ) is_active = Column ( Boolean (), default = True ) Transaction SQLA-wrapper default model behavior is auto commit, auto commit will be disabled with db.transaction context. with db . transaction (): item = Item . create ( name = 'test1' ) Operators Operators provided get_filters_expr to transform filters (dict) to SQLAlchemy expressions. from bali.db.operators import get_filters_expr from models import User users = User . query () . filter ( * get_filters_expr ( User , ** filters )) . all ()","title":"Database"},{"location":"database/#database","text":"","title":"Database"},{"location":"database/#connect","text":"from bali.core import db # connect to database when app started # db is a sqla-wrapper instance db . connect ( 'DATABASE_URI' )","title":"connect"},{"location":"database/#declarative-mode-with-sqla-wrapper","text":"class User ( db . Model ): __tablename__ \"users\" id = db . Column ( db . Integer , primary_key = True ) ... db . create_all () db . add ( User ( ... )) db . commit () todos = db . query ( User ) . all () More convenient usage, ref to SQLA-Wrapper","title":"Declarative mode with sqla-wrapper"},{"location":"database/#declare-models-inherit-from-convenient-base-models","text":"BaseModel # using BaseModel class User ( db . BaseModel ): __tablename__ \"users\" id = db . Column ( db . Integer , primary_key = True ) ... # BaseModel's source code class BaseModel ( db . Model ): __abstract__ = True created_time = Column ( DateTime ( timezone = True ), default = datetime . utcnow ) updated_time = Column ( DateTime ( timezone = True ), default = datetime . utcnow , onupdate = datetime . utcnow ) is_active = Column ( Boolean (), default = True )","title":"Declare models inherit from convenient base models"},{"location":"database/#transaction","text":"SQLA-wrapper default model behavior is auto commit, auto commit will be disabled with db.transaction context. with db . transaction (): item = Item . create ( name = 'test1' )","title":"Transaction"},{"location":"database/#operators","text":"Operators provided get_filters_expr to transform filters (dict) to SQLAlchemy expressions. from bali.db.operators import get_filters_expr from models import User users = User . query () . filter ( * get_filters_expr ( User , ** filters )) . all ()","title":"Operators"},{"location":"event/","text":"Event Messages rely on AMQP components, so they need to be configured accordingly, such as adding this configuration settings.py in your project. class Settings: AMQP_CONFIGS = { 'default': { 'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672', 'EXCHANGE_NAME': 'exchange_name', 'QUEUE_NAME': 'queue_name', 'ROUTING_KEY': 'routing_key', } } settings = Settings() initialize(settings) Define events from bali.events import Event class HelloEvent(Event): # The __amqp_name__ here defaults to default, # which means that the AMQP configuration using default is used __amqp_name__ = 'default' def dict(self, *args, **kwargs): # Rewrite dict to allow events to be transferred in the AMQP component in the way you define. # If dict is not rewritten, the message will be {'type': self.type, 'payload': self.payload} return {'type': self.type, **self.payload} Send events dispatch(HelloEvent(type='hello', payload={'aaa':'bbb'})) Event listening First you need to define the processing of the event handle_event and the type of listening for the event hello class EventHandler: @event_handler('hello') def handle_event(event): print(event) AMQP configuration for event type class Settings: AMQP_CONFIGS = { 'default': { 'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672', 'EXCHANGE_NAME': 'exchange_name', 'QUEUE_NAME': 'queue_name', 'ROUTING_KEY': 'routing_key', } } EVENT_TYPE_TO_AMQP = { 'hello': 'default' } settings = Settings() initialize(settings) Start listening for events python main.py --event","title":"Event"},{"location":"event/#event","text":"Messages rely on AMQP components, so they need to be configured accordingly, such as adding this configuration settings.py in your project. class Settings: AMQP_CONFIGS = { 'default': { 'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672', 'EXCHANGE_NAME': 'exchange_name', 'QUEUE_NAME': 'queue_name', 'ROUTING_KEY': 'routing_key', } } settings = Settings() initialize(settings) Define events from bali.events import Event class HelloEvent(Event): # The __amqp_name__ here defaults to default, # which means that the AMQP configuration using default is used __amqp_name__ = 'default' def dict(self, *args, **kwargs): # Rewrite dict to allow events to be transferred in the AMQP component in the way you define. # If dict is not rewritten, the message will be {'type': self.type, 'payload': self.payload} return {'type': self.type, **self.payload} Send events dispatch(HelloEvent(type='hello', payload={'aaa':'bbb'})) Event listening First you need to define the processing of the event handle_event and the type of listening for the event hello class EventHandler: @event_handler('hello') def handle_event(event): print(event) AMQP configuration for event type class Settings: AMQP_CONFIGS = { 'default': { 'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672', 'EXCHANGE_NAME': 'exchange_name', 'QUEUE_NAME': 'queue_name', 'ROUTING_KEY': 'routing_key', } } EVENT_TYPE_TO_AMQP = { 'hello': 'default' } settings = Settings() initialize(settings) Start listening for events python main.py --event","title":"Event"},{"location":"release-notes/","text":"Release Notes Change Log All notable changes to this project will be documented in this file. This project adheres to Semantic Versioning . includes Added / Changed / Fixed [3.3.0] UNRELEASED [3.2.0] 2022-06-16 Added The concept of manager is introduced \ud83e\udd42 New elegant model API methods \ud83e\udd42 PR#122 Added db.Base declarative_base Application add __clear__ for the convenience of unit testing Generated gRPC servicer for register resources \ud83c\udf55 PR#125 Introduce pytest-grpc for RPC service testing Changed Removed deprecated connection.retry_on_deadlock_decorator Removed deprecated connection.close_connection Updated related projects link comes from bali framework organization Removed deprecated bali.schema , use bali.schemas instead Marked GRPCTestBase as deprecated, will removed in v3.5 Add more unit tests to ensure project quality \ud83c\udfc4\u200d Fixed Fixed initialize http service every requests Optimized and fixed ModelResource in resource register style [3.1.0 ~ 3.1.6] 2020-04-30 ~ 2020-05-23 Added Event supported RabbitMQ fanout exchange support Fixed Compatible legacy SQLA-Wrapper SessionProxy [3.0.0] 2022-04-24 Added Upgraded to sql-wrapper v5.0.0 Supported uvicorn 0.15 Model support asynchronous Resource support asynchronous Changed Removed main.py default launch behavior [2.1.3] 2021-11-19 Added timezone added localtime / localdate [2.1.0] 2021-10-14 Changed Adjusted version range dependency packages [2.0.0] 2021-05-26 Added Resource layer base class, support elegant RESTful CRUD Refactor core layer, support multi dotenv variables Handle metadata or context [1.2.1] 2021-03-22 Changed Added custom route class support clear SQLAlchemy scoped session [1.2.0] 2021-03-21 Changed Added custom APIRouter support clear SQLAlchemy scoped session [1.1.2] 2021-03-20 Fixed Fixed close and remove session when FastAPI request completed Changed Added SQLAlchemy pool_recycle setting, default value is 2 hours [1.1.0] 2021-03-03 Added Added timezone settings and utility RPC logging when defined log handler New model method bind to BaseModel: count() and get_fields() [1.0.3] 2021-02-20 Fixed locked uvicorn version (0.12.3) to fixed runtime error [1.0.0] 2021-01-26 Added Added db stub file to improve code intelligence Ensure db remove even though exception raised Fixed gRPC base tests lost ProcessInterceptor [0.7.3] 2021-01-14 Added Added FastAPI Request GZip decompression [0.7.2] 2021-01-14 Added GZipMiddleware [0.7.1] 2021-01-07 Added Added gRPC interceptor process setup & teardown Added FastAPI middleware process setup & teardown [0.7.0] 2020-12-18 Added Added cache backend with Redis Added dateparse utility Fixed Fixed add_XXXServiceServicer_to_server in GRPCTestBase [0.6.0] 2020-11-26 Added Added bali Application Wrapper [0.5.3] 2020-11-23 Added Added to_dict() method to BaseModel [0.5.2] 2020-11-23 Fixed Fixed lost package pydantic-sqlalchemy [0.5.1] 2020-11-19 Fixed Fixed BaseModel's updated_time [0.5.0] 2020-11-19 Added Added model utility BaseModel Added convenient way to generate Pydantic model [0.4.1] 2020-11-12 Changed Removed NextBase replaced by db.Model [0.4.0] 2020-11-11 Added Added NextBase enhanced declarative base [0.3.0] 2020-11-02 Added -- Added gRPC service unit test base class Fixed Fixed MAXIMUM_RETRY_ON_DEADLOCK not defined issue [0.2.1] 2020-10-23 Added Added SQLAlchemy declarative Base [0.2.0] 2020-10-23 Added Added code formatter yapf . Added sqla-wrapper Migrated db layer to core Added gRPC service mixin to close database connection [0.1.0] 2020-10-13 Added Added gRPC / FastAPI stack requirements","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"Change Log All notable changes to this project will be documented in this file. This project adheres to Semantic Versioning . includes Added / Changed / Fixed","title":"Release Notes"},{"location":"release-notes/#330-unreleased","text":"","title":"[3.3.0] UNRELEASED"},{"location":"release-notes/#320-2022-06-16","text":"","title":"[3.2.0] 2022-06-16"},{"location":"release-notes/#added","text":"The concept of manager is introduced \ud83e\udd42 New elegant model API methods \ud83e\udd42 PR#122 Added db.Base declarative_base Application add __clear__ for the convenience of unit testing Generated gRPC servicer for register resources \ud83c\udf55 PR#125 Introduce pytest-grpc for RPC service testing","title":"Added"},{"location":"release-notes/#changed","text":"Removed deprecated connection.retry_on_deadlock_decorator Removed deprecated connection.close_connection Updated related projects link comes from bali framework organization Removed deprecated bali.schema , use bali.schemas instead Marked GRPCTestBase as deprecated, will removed in v3.5 Add more unit tests to ensure project quality \ud83c\udfc4\u200d","title":"Changed"},{"location":"release-notes/#fixed","text":"Fixed initialize http service every requests Optimized and fixed ModelResource in resource register style","title":"Fixed"},{"location":"release-notes/#310-316-2020-04-30-2020-05-23","text":"","title":"[3.1.0 ~ 3.1.6] 2020-04-30 ~ 2020-05-23"},{"location":"release-notes/#added_1","text":"Event supported RabbitMQ fanout exchange support","title":"Added"},{"location":"release-notes/#fixed_1","text":"Compatible legacy SQLA-Wrapper SessionProxy","title":"Fixed"},{"location":"release-notes/#300-2022-04-24","text":"","title":"[3.0.0] 2022-04-24"},{"location":"release-notes/#added_2","text":"Upgraded to sql-wrapper v5.0.0 Supported uvicorn 0.15 Model support asynchronous Resource support asynchronous","title":"Added"},{"location":"release-notes/#changed_1","text":"Removed main.py default launch behavior","title":"Changed"},{"location":"release-notes/#213-2021-11-19","text":"","title":"[2.1.3] 2021-11-19"},{"location":"release-notes/#added_3","text":"timezone added localtime / localdate","title":"Added"},{"location":"release-notes/#210-2021-10-14","text":"","title":"[2.1.0] 2021-10-14"},{"location":"release-notes/#changed_2","text":"Adjusted version range dependency packages","title":"Changed"},{"location":"release-notes/#200-2021-05-26","text":"","title":"[2.0.0] 2021-05-26"},{"location":"release-notes/#added_4","text":"Resource layer base class, support elegant RESTful CRUD Refactor core layer, support multi dotenv variables Handle metadata or context","title":"Added"},{"location":"release-notes/#121-2021-03-22","text":"","title":"[1.2.1] 2021-03-22"},{"location":"release-notes/#changed_3","text":"Added custom route class support clear SQLAlchemy scoped session","title":"Changed"},{"location":"release-notes/#120-2021-03-21","text":"","title":"[1.2.0] 2021-03-21"},{"location":"release-notes/#changed_4","text":"Added custom APIRouter support clear SQLAlchemy scoped session","title":"Changed"},{"location":"release-notes/#112-2021-03-20","text":"","title":"[1.1.2] 2021-03-20"},{"location":"release-notes/#fixed_2","text":"Fixed close and remove session when FastAPI request completed","title":"Fixed"},{"location":"release-notes/#changed_5","text":"Added SQLAlchemy pool_recycle setting, default value is 2 hours","title":"Changed"},{"location":"release-notes/#110-2021-03-03","text":"","title":"[1.1.0] 2021-03-03"},{"location":"release-notes/#added_5","text":"Added timezone settings and utility RPC logging when defined log handler New model method bind to BaseModel: count() and get_fields()","title":"Added"},{"location":"release-notes/#103-2021-02-20","text":"","title":"[1.0.3] 2021-02-20"},{"location":"release-notes/#fixed_3","text":"locked uvicorn version (0.12.3) to fixed runtime error","title":"Fixed"},{"location":"release-notes/#100-2021-01-26","text":"","title":"[1.0.0] 2021-01-26"},{"location":"release-notes/#added_6","text":"Added db stub file to improve code intelligence Ensure db remove even though exception raised","title":"Added"},{"location":"release-notes/#fixed_4","text":"gRPC base tests lost ProcessInterceptor","title":"Fixed"},{"location":"release-notes/#073-2021-01-14","text":"","title":"[0.7.3] 2021-01-14"},{"location":"release-notes/#added_7","text":"Added FastAPI Request GZip decompression","title":"Added"},{"location":"release-notes/#072-2021-01-14","text":"","title":"[0.7.2] 2021-01-14"},{"location":"release-notes/#added_8","text":"GZipMiddleware","title":"Added"},{"location":"release-notes/#071-2021-01-07","text":"","title":"[0.7.1] 2021-01-07"},{"location":"release-notes/#added_9","text":"Added gRPC interceptor process setup & teardown Added FastAPI middleware process setup & teardown","title":"Added"},{"location":"release-notes/#070-2020-12-18","text":"","title":"[0.7.0] 2020-12-18"},{"location":"release-notes/#added_10","text":"Added cache backend with Redis Added dateparse utility","title":"Added"},{"location":"release-notes/#fixed_5","text":"Fixed add_XXXServiceServicer_to_server in GRPCTestBase","title":"Fixed"},{"location":"release-notes/#060-2020-11-26","text":"","title":"[0.6.0] 2020-11-26"},{"location":"release-notes/#added_11","text":"Added bali Application Wrapper","title":"Added"},{"location":"release-notes/#053-2020-11-23","text":"","title":"[0.5.3] 2020-11-23"},{"location":"release-notes/#added_12","text":"Added to_dict() method to BaseModel","title":"Added"},{"location":"release-notes/#052-2020-11-23","text":"","title":"[0.5.2] 2020-11-23"},{"location":"release-notes/#fixed_6","text":"Fixed lost package pydantic-sqlalchemy","title":"Fixed"},{"location":"release-notes/#051-2020-11-19","text":"","title":"[0.5.1] 2020-11-19"},{"location":"release-notes/#fixed_7","text":"Fixed BaseModel's updated_time","title":"Fixed"},{"location":"release-notes/#050-2020-11-19","text":"","title":"[0.5.0] 2020-11-19"},{"location":"release-notes/#added_13","text":"Added model utility BaseModel Added convenient way to generate Pydantic model","title":"Added"},{"location":"release-notes/#041-2020-11-12","text":"","title":"[0.4.1] 2020-11-12"},{"location":"release-notes/#changed_6","text":"Removed NextBase replaced by db.Model","title":"Changed"},{"location":"release-notes/#040-2020-11-11","text":"","title":"[0.4.0] 2020-11-11"},{"location":"release-notes/#added_14","text":"Added NextBase enhanced declarative base","title":"Added"},{"location":"release-notes/#030-2020-11-02","text":"","title":"[0.3.0] 2020-11-02"},{"location":"release-notes/#added_15","text":"-- Added gRPC service unit test base class","title":"Added"},{"location":"release-notes/#fixed_8","text":"Fixed MAXIMUM_RETRY_ON_DEADLOCK not defined issue","title":"Fixed"},{"location":"release-notes/#021-2020-10-23","text":"","title":"[0.2.1] 2020-10-23"},{"location":"release-notes/#added_16","text":"Added SQLAlchemy declarative Base","title":"Added"},{"location":"release-notes/#020-2020-10-23","text":"","title":"[0.2.0] 2020-10-23"},{"location":"release-notes/#added_17","text":"Added code formatter yapf . Added sqla-wrapper Migrated db layer to core Added gRPC service mixin to close database connection","title":"Added"},{"location":"release-notes/#010-2020-10-13","text":"","title":"[0.1.0] 2020-10-13"},{"location":"release-notes/#added_18","text":"Added gRPC / FastAPI stack requirements","title":"Added"},{"location":"resource/","text":"Resource New in version 2.0. Resource\u2019s design borrows several key concepts from the REST architectural style. Inspired by ViewSet in Django REST Framework. Actions' name according Standard methods in Google API design guide Generic HTTP/RPC Actions Generic HTTP/RPC support actions: Action Route Method RPC Description get /{id} GET Get{Resource} Get an existing resource matching the given id list / GET List{Resource} Get all the resources create / POST Create{Resource} Create a new resource update /{id} PATCH Update{Resource} Update an existing resource matching the given id delete /{id} DELETE Delete{Resource} Delete an existing resource matching the given id Generic Actions examples: # 1. import `Resource` base class from bali.resources import Resource # 2. implementation actions inherited from Resource class GreeterResource ( Resource ): schema = Greeter @action () def get ( self , pk = None ): return [ g for g in GREETERS if g . get ( 'id' ) == pk ][ 0 ] @action () def list ( self , schema_in : ListRequest ): return GREETERS [: schema_in . limit ] @action () def create ( self , schema_in : schema ): return { 'id' : schema_in . id , 'content' : schema_in . content } @action () def update ( self , schema_in : schema , pk = None ): return { 'id' : pk , 'content' : schema_in . content } @action () def delete ( self , pk = None ): return { 'id' : pk , 'result' : True } # using `id` instand of `result` Custom HTTP/RPC Actions Custom actions also decorated by @action , but detail signature is required. @action ( detail = False ) def custom_action ( self ): pass detail has no default value. True means action to single resource, url path is '/{resources}/{id}'. False means action set of resources, url path is '/{resources}'. Override HTTP Actions If the default HTTP action template is not satisfied your request, you can override HTTP actions. # Get the origin router router = GreeterResource . as_router () # Override the actions using the FastAPI normal way @router . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } More usage of Resource : GreeterResource ModelResource New in version 2.1. class UserResource ( ModelResource ): model = User schema = UserSchema filters = [ { 'username' : str }, { 'age' : Optional [ str ]}, ] # yapf: disable permission_classes = [ IsAuthenticated ]","title":"Resource"},{"location":"resource/#resource","text":"New in version 2.0. Resource\u2019s design borrows several key concepts from the REST architectural style. Inspired by ViewSet in Django REST Framework. Actions' name according Standard methods in Google API design guide","title":"Resource"},{"location":"resource/#generic-httprpc-actions","text":"Generic HTTP/RPC support actions: Action Route Method RPC Description get /{id} GET Get{Resource} Get an existing resource matching the given id list / GET List{Resource} Get all the resources create / POST Create{Resource} Create a new resource update /{id} PATCH Update{Resource} Update an existing resource matching the given id delete /{id} DELETE Delete{Resource} Delete an existing resource matching the given id Generic Actions examples: # 1. import `Resource` base class from bali.resources import Resource # 2. implementation actions inherited from Resource class GreeterResource ( Resource ): schema = Greeter @action () def get ( self , pk = None ): return [ g for g in GREETERS if g . get ( 'id' ) == pk ][ 0 ] @action () def list ( self , schema_in : ListRequest ): return GREETERS [: schema_in . limit ] @action () def create ( self , schema_in : schema ): return { 'id' : schema_in . id , 'content' : schema_in . content } @action () def update ( self , schema_in : schema , pk = None ): return { 'id' : pk , 'content' : schema_in . content } @action () def delete ( self , pk = None ): return { 'id' : pk , 'result' : True } # using `id` instand of `result`","title":"Generic HTTP/RPC Actions"},{"location":"resource/#custom-httprpc-actions","text":"Custom actions also decorated by @action , but detail signature is required. @action ( detail = False ) def custom_action ( self ): pass detail has no default value. True means action to single resource, url path is '/{resources}/{id}'. False means action set of resources, url path is '/{resources}'.","title":"Custom HTTP/RPC Actions"},{"location":"resource/#override-http-actions","text":"If the default HTTP action template is not satisfied your request, you can override HTTP actions. # Get the origin router router = GreeterResource . as_router () # Override the actions using the FastAPI normal way @router . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } More usage of Resource : GreeterResource","title":"Override HTTP Actions"},{"location":"resource/#modelresource","text":"New in version 2.1. class UserResource ( ModelResource ): model = User schema = UserSchema filters = [ { 'username' : str }, { 'age' : Optional [ str ]}, ] # yapf: disable permission_classes = [ IsAuthenticated ]","title":"ModelResource"},{"location":"schema/","text":"Schema model_to_schema # generate pydantic schema from models # `User` is a db.Model or db.BaseModel instance from bali.schemas import model_to_schema UserSchema = model_to_schema ( User )","title":"Schema"},{"location":"schema/#schema","text":"model_to_schema # generate pydantic schema from models # `User` is a db.Model or db.BaseModel instance from bali.schemas import model_to_schema UserSchema = model_to_schema ( User )","title":"Schema"},{"location":"testing/","text":"Testing gRPC service tests from bali.tests import GRPCTestBase from service.demo import demo_service , demo_pb2 , demo_pb2_grpc class TestDemoRPC ( GRPCTestBase ): server_class = demo_service . DemoService # Provided service pb2 = demo_pb2 # Provided pb2 pb2_grpc = demo_pb2_grpc # Provided pb2 grpc def setup_method ( self ): # Pytest setup pass def teardown_method ( self ): # Pytest teardown pass def test_demo ( self ): pass","title":"Testing"},{"location":"testing/#testing","text":"gRPC service tests from bali.tests import GRPCTestBase from service.demo import demo_service , demo_pb2 , demo_pb2_grpc class TestDemoRPC ( GRPCTestBase ): server_class = demo_service . DemoService # Provided service pb2 = demo_pb2 # Provided pb2 pb2_grpc = demo_pb2_grpc # Provided pb2 grpc def setup_method ( self ): # Pytest setup pass def teardown_method ( self ): # Pytest teardown pass def test_demo ( self ): pass","title":"Testing"},{"location":"utility/","text":"Utils dateparser dateparser docs MessageToDict/ParseDict Optimized MessageToDict/ParseDict from google.protobuf.js_format from bali.utils import MessageToDict , ParseDict","title":"Utility"},{"location":"utility/#utils","text":"dateparser dateparser docs MessageToDict/ParseDict Optimized MessageToDict/ParseDict from google.protobuf.js_format from bali.utils import MessageToDict , ParseDict","title":"Utils"},{"location":"zh/docs/","text":"\ud83c\udfdd Simplify Cloud Native Microservices development base on FastAPI and gRPC. \u7b80\u4ecb \u7b80\u5316\u57fa\u4e8e FastAPI \u548c gRPC \u7684\u4e91\u539f\u751f\u5fae\u670d\u52a1\u5f00\u53d1\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u4f60\u7684\u9879\u76ee\u540c\u65f6\u652f\u6301 HTTP \u548c gRPC ,\u90a3\u4e48 Bali \u53ef\u4ee5\u5e2e\u52a9\u4f60\u5f88\u8f7b\u677e\u7684\u5b8c\u6210\u3002 Bali \u7684\u7279\u6027\uff1a \u9879\u76ee\u7ed3\u6784\u7b80\u5355\u3002 \u878d\u5408\u4e86 SQLAlchemy \u5e76\u63d0\u4f9b\u4e86 model \u751f\u6210\u7684\u65b9\u6cd5\u3002 \u63d0\u4f9b\u4e86\u5de5\u5177\u7c7b\u8f6c\u6362 model \u6210\u4e3a Pydantic \u6a21\u5f0f. \u652f\u6301 GZip \u89e3\u538b\u7f29. \ud83c\udf7b Resource \u5c42\u5904\u7406\u5bf9\u5916\u670d\u52a1\u5373\u652f\u6301 HTTP \u53c8\u652f\u6301 gRPC \u652f\u6301 Event \u53d1\u9001\u53ca\u76d1\u542c \u8c01\u5728\u4f7f\u7528 Bali \u6846\u67b6 \u4f9d\u8d56 Python 3.7+ FastAPI 0.63+ grpcio>=1.32.0,<1.42 \u5b89\u88c5 # Bali framework pip install bali-core # Bali command line tool pip install bali-cli","title":"Index"},{"location":"zh/docs/#_1","text":"\ud83c\udfdd Simplify Cloud Native Microservices development base on FastAPI and gRPC.","title":""},{"location":"zh/docs/#_2","text":"\u7b80\u5316\u57fa\u4e8e FastAPI \u548c gRPC \u7684\u4e91\u539f\u751f\u5fae\u670d\u52a1\u5f00\u53d1\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u4f60\u7684\u9879\u76ee\u540c\u65f6\u652f\u6301 HTTP \u548c gRPC ,\u90a3\u4e48 Bali \u53ef\u4ee5\u5e2e\u52a9\u4f60\u5f88\u8f7b\u677e\u7684\u5b8c\u6210\u3002 Bali \u7684\u7279\u6027\uff1a \u9879\u76ee\u7ed3\u6784\u7b80\u5355\u3002 \u878d\u5408\u4e86 SQLAlchemy \u5e76\u63d0\u4f9b\u4e86 model \u751f\u6210\u7684\u65b9\u6cd5\u3002 \u63d0\u4f9b\u4e86\u5de5\u5177\u7c7b\u8f6c\u6362 model \u6210\u4e3a Pydantic \u6a21\u5f0f. \u652f\u6301 GZip \u89e3\u538b\u7f29. \ud83c\udf7b Resource \u5c42\u5904\u7406\u5bf9\u5916\u670d\u52a1\u5373\u652f\u6301 HTTP \u53c8\u652f\u6301 gRPC \u652f\u6301 Event \u53d1\u9001\u53ca\u76d1\u542c","title":"\u7b80\u4ecb"},{"location":"zh/docs/#bali","text":"","title":"\u8c01\u5728\u4f7f\u7528 Bali \u6846\u67b6"},{"location":"zh/docs/#_3","text":"Python 3.7+ FastAPI 0.63+ grpcio>=1.32.0,<1.42","title":"\u4f9d\u8d56"},{"location":"zh/docs/#_4","text":"# Bali framework pip install bali-core # Bali command line tool pip install bali-cli","title":"\u5b89\u88c5"},{"location":"zh/docs/application/","text":"Application Create Application import greeter_server # Initialized App app = Bali () # Updated settings app . settings ( base_settings = { 'title' : 'Bali App' }) Launch # lauch RPC python main.py --rpc # lauch HTTP python main.py --http More usage of Application : example","title":"Application"},{"location":"zh/docs/application/#application","text":"Create Application import greeter_server # Initialized App app = Bali () # Updated settings app . settings ( base_settings = { 'title' : 'Bali App' }) Launch # lauch RPC python main.py --rpc # lauch HTTP python main.py --http More usage of Application : example","title":"Application"},{"location":"zh/docs/cache/","text":"Cache Cache API from bali.core import cache # Usage example (API) # Read cache cache . get ( key ) # Set cache cache . set ( key , value , timeout = 10 ) cache memoize # Import the cache_memoize from bali core from bali.core import cache_memoize # Attach decorator to cacheable function with a timeout of 100 seconds. @cache_memoize ( 100 ) def expensive_function ( start , end ): return random . randint ( start , end )","title":"Cache"},{"location":"zh/docs/cache/#cache","text":"","title":"Cache"},{"location":"zh/docs/cache/#cache-api","text":"from bali.core import cache # Usage example (API) # Read cache cache . get ( key ) # Set cache cache . set ( key , value , timeout = 10 )","title":"Cache API"},{"location":"zh/docs/cache/#cache-memoize","text":"# Import the cache_memoize from bali core from bali.core import cache_memoize # Attach decorator to cacheable function with a timeout of 100 seconds. @cache_memoize ( 100 ) def expensive_function ( start , end ): return random . randint ( start , end )","title":"cache memoize"},{"location":"zh/docs/database/","text":"Database connect from bali.core import db # connect to database when app started # db is a sqla-wrapper instance db . connect ( 'DATABASE_URI' ) Declarative mode with sqla-wrapper class User ( db . Model ): __tablename__ \"users\" id = db . Column ( db . Integer , primary_key = True ) ... db . create_all () db . add ( User ( ... )) db . commit () todos = db . query ( User ) . all () More convenient usage, ref to SQLA-Wrapper Declare models inherit from convenient base models BaseModel # using BaseModel class User ( db . BaseModel ): __tablename__ \"users\" id = db . Column ( db . Integer , primary_key = True ) ... # BaseModel's source code class BaseModel ( db . Model ): __abstract__ = True created_time = Column ( DateTime ( timezone = True ), default = datetime . utcnow ) updated_time = Column ( DateTime ( timezone = True ), default = datetime . utcnow , onupdate = datetime . utcnow ) is_active = Column ( Boolean (), default = True ) Transaction SQLA-wrapper default model behavior is auto commit, auto commit will be disabled with db.transaction context. with db . transaction (): item = Item . create ( name = 'test1' ) Operators Operators provided get_filters_expr to transform filters (dict) to SQLAlchemy expressions. from bali.db.operators import get_filters_expr from models import User users = User . query () . filter ( * get_filters_expr ( User , ** filters )) . all ()","title":"Database"},{"location":"zh/docs/database/#database","text":"","title":"Database"},{"location":"zh/docs/database/#connect","text":"from bali.core import db # connect to database when app started # db is a sqla-wrapper instance db . connect ( 'DATABASE_URI' )","title":"connect"},{"location":"zh/docs/database/#declarative-mode-with-sqla-wrapper","text":"class User ( db . Model ): __tablename__ \"users\" id = db . Column ( db . Integer , primary_key = True ) ... db . create_all () db . add ( User ( ... )) db . commit () todos = db . query ( User ) . all () More convenient usage, ref to SQLA-Wrapper","title":"Declarative mode with sqla-wrapper"},{"location":"zh/docs/database/#declare-models-inherit-from-convenient-base-models","text":"BaseModel # using BaseModel class User ( db . BaseModel ): __tablename__ \"users\" id = db . Column ( db . Integer , primary_key = True ) ... # BaseModel's source code class BaseModel ( db . Model ): __abstract__ = True created_time = Column ( DateTime ( timezone = True ), default = datetime . utcnow ) updated_time = Column ( DateTime ( timezone = True ), default = datetime . utcnow , onupdate = datetime . utcnow ) is_active = Column ( Boolean (), default = True )","title":"Declare models inherit from convenient base models"},{"location":"zh/docs/database/#transaction","text":"SQLA-wrapper default model behavior is auto commit, auto commit will be disabled with db.transaction context. with db . transaction (): item = Item . create ( name = 'test1' )","title":"Transaction"},{"location":"zh/docs/database/#operators","text":"Operators provided get_filters_expr to transform filters (dict) to SQLAlchemy expressions. from bali.db.operators import get_filters_expr from models import User users = User . query () . filter ( * get_filters_expr ( User , ** filters )) . all ()","title":"Operators"},{"location":"zh/docs/event/","text":"Event \u6d88\u606f\u4f9d\u8d56 AMQP \u7ec4\u4ef6\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u76f8\u5e94\u914d\u7f6e\uff0c\u4f8b\u5982\u5728\u4f60\u7684\u9879\u76ee\u4e2d settings.py \u91cc\u9762\u52a0\u5165\u8fd9\u6bb5\u914d\u7f6e class Settings: AMQP_CONFIGS = { 'default': { 'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672', 'EXCHANGE_NAME': 'exchange_name', 'QUEUE_NAME': 'queue_name', 'ROUTING_KEY': 'routing_key', } } settings = Settings() initialize(settings) \u5b9a\u4e49 Event from bali.events import Event class HelloEvent(Event): # \u8fd9\u91cc\u7684 __amqp_name__ \u9ed8\u8ba4\u5c31\u662f default\uff0c # \u4ee3\u8868\u4f7f\u7528\u7684\u662f default \u7684 AMQP \u914d\u7f6e __amqp_name__ = 'default' def dict(self, *args, **kwargs): # \u91cd\u5199 dict \uff0c\u53ef\u4ee5\u8ba9 event \u6309\u7167\u4f60\u5b9a\u4e49\u7684\u65b9\u5f0f\u5728 AMQP \u7ec4\u4ef6\u4e2d\u4f20\u8f93\uff0c # \u5982\u679c\u4e0d\u91cd\u5199 dict\uff0c\u90a3\u4e48\u6d88\u606f\u5c06\u662f {'type': self.type, 'payload': self.payload} return {'type': self.type, **self.payload} \u53d1\u9001\u4e8b\u4ef6\uff1a dispatch(HelloEvent(type='hello', payload={'aaa':'bbb'})) \u4e8b\u4ef6\u76d1\u542c\uff1a \u9996\u5148\u9700\u8981\u5b9a\u4e49\u4e8b\u4ef6\u7684\u5904\u7406 handle_event \u53ca\u76d1\u542c\u4e8b\u4ef6\u7684\u7c7b\u578b hello class EventHandler: @event_handler('hello') def handle_event(event): print(event) \u4e8b\u4ef6\u7c7b\u578b\u5bf9\u5e94\u7684 AMQP \u914d\u7f6e\uff1a class Settings: AMQP_CONFIGS = { 'default': { 'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672', 'EXCHANGE_NAME': 'exchange_name', 'QUEUE_NAME': 'queue_name', 'ROUTING_KEY': 'routing_key', } } EVENT_TYPE_TO_AMQP = { 'hello': 'default' } settings = Settings() initialize(settings) \u5f00\u59cb\u76d1\u542c\u4e8b\u4ef6\uff1a python main.py --event","title":"Event"},{"location":"zh/docs/event/#event","text":"\u6d88\u606f\u4f9d\u8d56 AMQP \u7ec4\u4ef6\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u76f8\u5e94\u914d\u7f6e\uff0c\u4f8b\u5982\u5728\u4f60\u7684\u9879\u76ee\u4e2d settings.py \u91cc\u9762\u52a0\u5165\u8fd9\u6bb5\u914d\u7f6e class Settings: AMQP_CONFIGS = { 'default': { 'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672', 'EXCHANGE_NAME': 'exchange_name', 'QUEUE_NAME': 'queue_name', 'ROUTING_KEY': 'routing_key', } } settings = Settings() initialize(settings) \u5b9a\u4e49 Event from bali.events import Event class HelloEvent(Event): # \u8fd9\u91cc\u7684 __amqp_name__ \u9ed8\u8ba4\u5c31\u662f default\uff0c # \u4ee3\u8868\u4f7f\u7528\u7684\u662f default \u7684 AMQP \u914d\u7f6e __amqp_name__ = 'default' def dict(self, *args, **kwargs): # \u91cd\u5199 dict \uff0c\u53ef\u4ee5\u8ba9 event \u6309\u7167\u4f60\u5b9a\u4e49\u7684\u65b9\u5f0f\u5728 AMQP \u7ec4\u4ef6\u4e2d\u4f20\u8f93\uff0c # \u5982\u679c\u4e0d\u91cd\u5199 dict\uff0c\u90a3\u4e48\u6d88\u606f\u5c06\u662f {'type': self.type, 'payload': self.payload} return {'type': self.type, **self.payload} \u53d1\u9001\u4e8b\u4ef6\uff1a dispatch(HelloEvent(type='hello', payload={'aaa':'bbb'})) \u4e8b\u4ef6\u76d1\u542c\uff1a \u9996\u5148\u9700\u8981\u5b9a\u4e49\u4e8b\u4ef6\u7684\u5904\u7406 handle_event \u53ca\u76d1\u542c\u4e8b\u4ef6\u7684\u7c7b\u578b hello class EventHandler: @event_handler('hello') def handle_event(event): print(event) \u4e8b\u4ef6\u7c7b\u578b\u5bf9\u5e94\u7684 AMQP \u914d\u7f6e\uff1a class Settings: AMQP_CONFIGS = { 'default': { 'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672', 'EXCHANGE_NAME': 'exchange_name', 'QUEUE_NAME': 'queue_name', 'ROUTING_KEY': 'routing_key', } } EVENT_TYPE_TO_AMQP = { 'hello': 'default' } settings = Settings() initialize(settings) \u5f00\u59cb\u76d1\u542c\u4e8b\u4ef6\uff1a python main.py --event","title":"Event"},{"location":"zh/docs/release-notes/","text":"Release Notes Change Log All notable changes to this project will be documented in this file. This project adheres to Semantic Versioning . includes Added / Changed / Fixed [3.3.0] UNRELEASED [3.2.0] 2022-06-16 Added The concept of manager is introduced \ud83e\udd42 New elegant model API methods \ud83e\udd42 PR#122 Added db.Base declarative_base Application add __clear__ for the convenience of unit testing Generated gRPC servicer for register resources \ud83c\udf55 PR#125 Introduce pytest-grpc for RPC service testing Changed Removed deprecated connection.retry_on_deadlock_decorator Removed deprecated connection.close_connection Updated related projects link comes from bali framework organization Removed deprecated bali.schema , use bali.schemas instead Marked GRPCTestBase as deprecated, will removed in v3.5 Add more unit tests to ensure project quality \ud83c\udfc4\u200d Fixed Fixed initialize http service every requests Optimized and fixed ModelResource in resource register style [3.1.0 ~ 3.1.6] 2020-04-30 ~ 2020-05-23 Added Event supported RabbitMQ fanout exchange support Fixed Compatible legacy SQLA-Wrapper SessionProxy [3.0.0] 2022-04-24 Added Upgraded to sql-wrapper v5.0.0 Supported uvicorn 0.15 Model support asynchronous Resource support asynchronous Changed Removed main.py default launch behavior [2.1.3] 2021-11-19 Added timezone added localtime / localdate [2.1.0] 2021-10-14 Changed Adjusted version range dependency packages [2.0.0] 2021-05-26 Added Resource layer base class, support elegant RESTful CRUD Refactor core layer, support multi dotenv variables Handle metadata or context [1.2.1] 2021-03-22 Changed Added custom route class support clear SQLAlchemy scoped session [1.2.0] 2021-03-21 Changed Added custom APIRouter support clear SQLAlchemy scoped session [1.1.2] 2021-03-20 Fixed Fixed close and remove session when FastAPI request completed Changed Added SQLAlchemy pool_recycle setting, default value is 2 hours [1.1.0] 2021-03-03 Added Added timezone settings and utility RPC logging when defined log handler New model method bind to BaseModel: count() and get_fields() [1.0.3] 2021-02-20 Fixed locked uvicorn version (0.12.3) to fixed runtime error [1.0.0] 2021-01-26 Added Added db stub file to improve code intelligence Ensure db remove even though exception raised Fixed gRPC base tests lost ProcessInterceptor [0.7.3] 2021-01-14 Added Added FastAPI Request GZip decompression [0.7.2] 2021-01-14 Added GZipMiddleware [0.7.1] 2021-01-07 Added Added gRPC interceptor process setup & teardown Added FastAPI middleware process setup & teardown [0.7.0] 2020-12-18 Added Added cache backend with Redis Added dateparse utility Fixed Fixed add_XXXServiceServicer_to_server in GRPCTestBase [0.6.0] 2020-11-26 Added Added bali Application Wrapper [0.5.3] 2020-11-23 Added Added to_dict() method to BaseModel [0.5.2] 2020-11-23 Fixed Fixed lost package pydantic-sqlalchemy [0.5.1] 2020-11-19 Fixed Fixed BaseModel's updated_time [0.5.0] 2020-11-19 Added Added model utility BaseModel Added convenient way to generate Pydantic model [0.4.1] 2020-11-12 Changed Removed NextBase replaced by db.Model [0.4.0] 2020-11-11 Added Added NextBase enhanced declarative base [0.3.0] 2020-11-02 Added -- Added gRPC service unit test base class Fixed Fixed MAXIMUM_RETRY_ON_DEADLOCK not defined issue [0.2.1] 2020-10-23 Added Added SQLAlchemy declarative Base [0.2.0] 2020-10-23 Added Added code formatter yapf . Added sqla-wrapper Migrated db layer to core Added gRPC service mixin to close database connection [0.1.0] 2020-10-13 Added Added gRPC / FastAPI stack requirements","title":"Release Notes"},{"location":"zh/docs/release-notes/#release-notes","text":"Change Log All notable changes to this project will be documented in this file. This project adheres to Semantic Versioning . includes Added / Changed / Fixed","title":"Release Notes"},{"location":"zh/docs/release-notes/#330-unreleased","text":"","title":"[3.3.0] UNRELEASED"},{"location":"zh/docs/release-notes/#320-2022-06-16","text":"","title":"[3.2.0] 2022-06-16"},{"location":"zh/docs/release-notes/#added","text":"The concept of manager is introduced \ud83e\udd42 New elegant model API methods \ud83e\udd42 PR#122 Added db.Base declarative_base Application add __clear__ for the convenience of unit testing Generated gRPC servicer for register resources \ud83c\udf55 PR#125 Introduce pytest-grpc for RPC service testing","title":"Added"},{"location":"zh/docs/release-notes/#changed","text":"Removed deprecated connection.retry_on_deadlock_decorator Removed deprecated connection.close_connection Updated related projects link comes from bali framework organization Removed deprecated bali.schema , use bali.schemas instead Marked GRPCTestBase as deprecated, will removed in v3.5 Add more unit tests to ensure project quality \ud83c\udfc4\u200d","title":"Changed"},{"location":"zh/docs/release-notes/#fixed","text":"Fixed initialize http service every requests Optimized and fixed ModelResource in resource register style","title":"Fixed"},{"location":"zh/docs/release-notes/#310-316-2020-04-30-2020-05-23","text":"","title":"[3.1.0 ~ 3.1.6] 2020-04-30 ~ 2020-05-23"},{"location":"zh/docs/release-notes/#added_1","text":"Event supported RabbitMQ fanout exchange support","title":"Added"},{"location":"zh/docs/release-notes/#fixed_1","text":"Compatible legacy SQLA-Wrapper SessionProxy","title":"Fixed"},{"location":"zh/docs/release-notes/#300-2022-04-24","text":"","title":"[3.0.0] 2022-04-24"},{"location":"zh/docs/release-notes/#added_2","text":"Upgraded to sql-wrapper v5.0.0 Supported uvicorn 0.15 Model support asynchronous Resource support asynchronous","title":"Added"},{"location":"zh/docs/release-notes/#changed_1","text":"Removed main.py default launch behavior","title":"Changed"},{"location":"zh/docs/release-notes/#213-2021-11-19","text":"","title":"[2.1.3] 2021-11-19"},{"location":"zh/docs/release-notes/#added_3","text":"timezone added localtime / localdate","title":"Added"},{"location":"zh/docs/release-notes/#210-2021-10-14","text":"","title":"[2.1.0] 2021-10-14"},{"location":"zh/docs/release-notes/#changed_2","text":"Adjusted version range dependency packages","title":"Changed"},{"location":"zh/docs/release-notes/#200-2021-05-26","text":"","title":"[2.0.0] 2021-05-26"},{"location":"zh/docs/release-notes/#added_4","text":"Resource layer base class, support elegant RESTful CRUD Refactor core layer, support multi dotenv variables Handle metadata or context","title":"Added"},{"location":"zh/docs/release-notes/#121-2021-03-22","text":"","title":"[1.2.1] 2021-03-22"},{"location":"zh/docs/release-notes/#changed_3","text":"Added custom route class support clear SQLAlchemy scoped session","title":"Changed"},{"location":"zh/docs/release-notes/#120-2021-03-21","text":"","title":"[1.2.0] 2021-03-21"},{"location":"zh/docs/release-notes/#changed_4","text":"Added custom APIRouter support clear SQLAlchemy scoped session","title":"Changed"},{"location":"zh/docs/release-notes/#112-2021-03-20","text":"","title":"[1.1.2] 2021-03-20"},{"location":"zh/docs/release-notes/#fixed_2","text":"Fixed close and remove session when FastAPI request completed","title":"Fixed"},{"location":"zh/docs/release-notes/#changed_5","text":"Added SQLAlchemy pool_recycle setting, default value is 2 hours","title":"Changed"},{"location":"zh/docs/release-notes/#110-2021-03-03","text":"","title":"[1.1.0] 2021-03-03"},{"location":"zh/docs/release-notes/#added_5","text":"Added timezone settings and utility RPC logging when defined log handler New model method bind to BaseModel: count() and get_fields()","title":"Added"},{"location":"zh/docs/release-notes/#103-2021-02-20","text":"","title":"[1.0.3] 2021-02-20"},{"location":"zh/docs/release-notes/#fixed_3","text":"locked uvicorn version (0.12.3) to fixed runtime error","title":"Fixed"},{"location":"zh/docs/release-notes/#100-2021-01-26","text":"","title":"[1.0.0] 2021-01-26"},{"location":"zh/docs/release-notes/#added_6","text":"Added db stub file to improve code intelligence Ensure db remove even though exception raised","title":"Added"},{"location":"zh/docs/release-notes/#fixed_4","text":"gRPC base tests lost ProcessInterceptor","title":"Fixed"},{"location":"zh/docs/release-notes/#073-2021-01-14","text":"","title":"[0.7.3] 2021-01-14"},{"location":"zh/docs/release-notes/#added_7","text":"Added FastAPI Request GZip decompression","title":"Added"},{"location":"zh/docs/release-notes/#072-2021-01-14","text":"","title":"[0.7.2] 2021-01-14"},{"location":"zh/docs/release-notes/#added_8","text":"GZipMiddleware","title":"Added"},{"location":"zh/docs/release-notes/#071-2021-01-07","text":"","title":"[0.7.1] 2021-01-07"},{"location":"zh/docs/release-notes/#added_9","text":"Added gRPC interceptor process setup & teardown Added FastAPI middleware process setup & teardown","title":"Added"},{"location":"zh/docs/release-notes/#070-2020-12-18","text":"","title":"[0.7.0] 2020-12-18"},{"location":"zh/docs/release-notes/#added_10","text":"Added cache backend with Redis Added dateparse utility","title":"Added"},{"location":"zh/docs/release-notes/#fixed_5","text":"Fixed add_XXXServiceServicer_to_server in GRPCTestBase","title":"Fixed"},{"location":"zh/docs/release-notes/#060-2020-11-26","text":"","title":"[0.6.0] 2020-11-26"},{"location":"zh/docs/release-notes/#added_11","text":"Added bali Application Wrapper","title":"Added"},{"location":"zh/docs/release-notes/#053-2020-11-23","text":"","title":"[0.5.3] 2020-11-23"},{"location":"zh/docs/release-notes/#added_12","text":"Added to_dict() method to BaseModel","title":"Added"},{"location":"zh/docs/release-notes/#052-2020-11-23","text":"","title":"[0.5.2] 2020-11-23"},{"location":"zh/docs/release-notes/#fixed_6","text":"Fixed lost package pydantic-sqlalchemy","title":"Fixed"},{"location":"zh/docs/release-notes/#051-2020-11-19","text":"","title":"[0.5.1] 2020-11-19"},{"location":"zh/docs/release-notes/#fixed_7","text":"Fixed BaseModel's updated_time","title":"Fixed"},{"location":"zh/docs/release-notes/#050-2020-11-19","text":"","title":"[0.5.0] 2020-11-19"},{"location":"zh/docs/release-notes/#added_13","text":"Added model utility BaseModel Added convenient way to generate Pydantic model","title":"Added"},{"location":"zh/docs/release-notes/#041-2020-11-12","text":"","title":"[0.4.1] 2020-11-12"},{"location":"zh/docs/release-notes/#changed_6","text":"Removed NextBase replaced by db.Model","title":"Changed"},{"location":"zh/docs/release-notes/#040-2020-11-11","text":"","title":"[0.4.0] 2020-11-11"},{"location":"zh/docs/release-notes/#added_14","text":"Added NextBase enhanced declarative base","title":"Added"},{"location":"zh/docs/release-notes/#030-2020-11-02","text":"","title":"[0.3.0] 2020-11-02"},{"location":"zh/docs/release-notes/#added_15","text":"-- Added gRPC service unit test base class","title":"Added"},{"location":"zh/docs/release-notes/#fixed_8","text":"Fixed MAXIMUM_RETRY_ON_DEADLOCK not defined issue","title":"Fixed"},{"location":"zh/docs/release-notes/#021-2020-10-23","text":"","title":"[0.2.1] 2020-10-23"},{"location":"zh/docs/release-notes/#added_16","text":"Added SQLAlchemy declarative Base","title":"Added"},{"location":"zh/docs/release-notes/#020-2020-10-23","text":"","title":"[0.2.0] 2020-10-23"},{"location":"zh/docs/release-notes/#added_17","text":"Added code formatter yapf . Added sqla-wrapper Migrated db layer to core Added gRPC service mixin to close database connection","title":"Added"},{"location":"zh/docs/release-notes/#010-2020-10-13","text":"","title":"[0.1.0] 2020-10-13"},{"location":"zh/docs/release-notes/#added_18","text":"Added gRPC / FastAPI stack requirements","title":"Added"},{"location":"zh/docs/resource/","text":"Resource \u5728\u7248\u672c 2.0. \u4e2d\u52a0\u5165 Resource\u7684\u8bbe\u8ba1\u501f\u9274\u4e86REST\u4f53\u7cfb\u7ed3\u6784\u98ce\u683c\u7684\u51e0\u4e2a\u5173\u952e\u6982\u5ff5\u3002 \u7075\u611f\u6765\u81ea\u4e8eDjango REST\u6846\u67b6\u4e2d\u7684' ViewSet '\u3002 Actions \u547d\u540d\u4f9d\u636e Standard methods in Google API design guide \u901a\u7528 HTTP/RPC \u652f\u6301\u64cd\u4f5c \u901a\u7528 HTTP/RPC \u652f\u6301\u64cd\u4f5c: Action Route Method RPC Description get /{id} GET Get{Resource} \u83b7\u53d6\u4e0e\u7ed9\u5b9aid\u5339\u914d\u7684\u73b0\u6709\u8d44\u6e90 list / GET List{Resource} \u83b7\u53d6\u6240\u6709\u8d44\u6e90 create / POST Create{Resource} \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d44\u6e90 update /{id} PATCH Update{Resource} \u66f4\u65b0\u4e0e\u7ed9\u5b9a id \u5339\u914d\u7684\u73b0\u6709\u8d44\u6e90 delete /{id} DELETE Delete{Resource} \u5220\u9664\u4e0e\u7ed9\u5b9a id \u5339\u914d\u7684\u73b0\u6709\u8d44\u6e90 \u901a\u7528\u793a\u4f8b: # 1. import `Resource` base class from bali.resources import Resource # 2. implementation actions inherited from Resource class GreeterResource ( Resource ): schema = Greeter @action () def get ( self , pk = None ): return [ g for g in GREETERS if g . get ( 'id' ) == pk ][ 0 ] @action () def list ( self , schema_in : ListRequest ): return GREETERS [: schema_in . limit ] @action () def create ( self , schema_in : schema ): return { 'id' : schema_in . id , 'content' : schema_in . content } @action () def update ( self , schema_in : schema , pk = None ): return { 'id' : pk , 'content' : schema_in . content } @action () def delete ( self , pk = None ): return { 'id' : pk , 'result' : True } # using `id` instand of `result` \u7528\u6237\u81ea\u5b9a\u4e49 HTTP/RPC Actions \u7528\u6237\u81ea\u5b9a\u4e49\u7684 Action \u8fd8\u662f\u9700\u8981\u4f7f\u7528 @action , \u5355\u662f\u53c2\u6570 detail \u5fc5\u987b\u8981\u8bbe\u7f6e. @action ( detail = False ) def custom_action ( self ): pass detail \u6ca1\u6709\u9ed8\u8ba4\u503c. True \u4ee3\u8868 action \u5bf9\u5e94\u7684\u662f\u5355\u4e2a\u8d44\u6e90, url \u4e3a '/{resources}/{id}'. False \u4ee3\u8868 action \u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u8d44\u6e90\u96c6, url \u4e3a '/{resources}'. \u91cd\u5199 HTTP Actions \u5982\u679c\u9ed8\u8ba4\u7684HTTP\u52a8\u4f5c\u6a21\u677f\u4e0d\u80fd\u6ee1\u8db3\u60a8\u7684\u8bf7\u6c42\uff0c\u60a8\u53ef\u4ee5\u8986\u76d6HTTP\u52a8\u4f5c\u3002 # Get the origin router router = GreeterResource . as_router () # Override the actions using the FastAPI normal way @router . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } \u66f4\u591a\u5173\u4e8e Resource : GreeterResource ModelResource \u5728\u7248\u672c 2.1. \u4e2d\u65b0\u589e class UserResource ( ModelResource ): model = User schema = UserSchema filters = [ { 'username' : str }, { 'age' : Optional [ str ]}, ] # yapf: disable permission_classes = [ IsAuthenticated ]","title":"Resource"},{"location":"zh/docs/resource/#resource","text":"\u5728\u7248\u672c 2.0. \u4e2d\u52a0\u5165 Resource\u7684\u8bbe\u8ba1\u501f\u9274\u4e86REST\u4f53\u7cfb\u7ed3\u6784\u98ce\u683c\u7684\u51e0\u4e2a\u5173\u952e\u6982\u5ff5\u3002 \u7075\u611f\u6765\u81ea\u4e8eDjango REST\u6846\u67b6\u4e2d\u7684' ViewSet '\u3002 Actions \u547d\u540d\u4f9d\u636e Standard methods in Google API design guide","title":"Resource"},{"location":"zh/docs/resource/#httprpc","text":"\u901a\u7528 HTTP/RPC \u652f\u6301\u64cd\u4f5c: Action Route Method RPC Description get /{id} GET Get{Resource} \u83b7\u53d6\u4e0e\u7ed9\u5b9aid\u5339\u914d\u7684\u73b0\u6709\u8d44\u6e90 list / GET List{Resource} \u83b7\u53d6\u6240\u6709\u8d44\u6e90 create / POST Create{Resource} \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d44\u6e90 update /{id} PATCH Update{Resource} \u66f4\u65b0\u4e0e\u7ed9\u5b9a id \u5339\u914d\u7684\u73b0\u6709\u8d44\u6e90 delete /{id} DELETE Delete{Resource} \u5220\u9664\u4e0e\u7ed9\u5b9a id \u5339\u914d\u7684\u73b0\u6709\u8d44\u6e90 \u901a\u7528\u793a\u4f8b: # 1. import `Resource` base class from bali.resources import Resource # 2. implementation actions inherited from Resource class GreeterResource ( Resource ): schema = Greeter @action () def get ( self , pk = None ): return [ g for g in GREETERS if g . get ( 'id' ) == pk ][ 0 ] @action () def list ( self , schema_in : ListRequest ): return GREETERS [: schema_in . limit ] @action () def create ( self , schema_in : schema ): return { 'id' : schema_in . id , 'content' : schema_in . content } @action () def update ( self , schema_in : schema , pk = None ): return { 'id' : pk , 'content' : schema_in . content } @action () def delete ( self , pk = None ): return { 'id' : pk , 'result' : True } # using `id` instand of `result`","title":"\u901a\u7528 HTTP/RPC \u652f\u6301\u64cd\u4f5c"},{"location":"zh/docs/resource/#httprpc-actions","text":"\u7528\u6237\u81ea\u5b9a\u4e49\u7684 Action \u8fd8\u662f\u9700\u8981\u4f7f\u7528 @action , \u5355\u662f\u53c2\u6570 detail \u5fc5\u987b\u8981\u8bbe\u7f6e. @action ( detail = False ) def custom_action ( self ): pass detail \u6ca1\u6709\u9ed8\u8ba4\u503c. True \u4ee3\u8868 action \u5bf9\u5e94\u7684\u662f\u5355\u4e2a\u8d44\u6e90, url \u4e3a '/{resources}/{id}'. False \u4ee3\u8868 action \u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u8d44\u6e90\u96c6, url \u4e3a '/{resources}'.","title":"\u7528\u6237\u81ea\u5b9a\u4e49 HTTP/RPC Actions"},{"location":"zh/docs/resource/#http-actions","text":"\u5982\u679c\u9ed8\u8ba4\u7684HTTP\u52a8\u4f5c\u6a21\u677f\u4e0d\u80fd\u6ee1\u8db3\u60a8\u7684\u8bf7\u6c42\uff0c\u60a8\u53ef\u4ee5\u8986\u76d6HTTP\u52a8\u4f5c\u3002 # Get the origin router router = GreeterResource . as_router () # Override the actions using the FastAPI normal way @router . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } \u66f4\u591a\u5173\u4e8e Resource : GreeterResource","title":"\u91cd\u5199 HTTP Actions"},{"location":"zh/docs/resource/#modelresource","text":"\u5728\u7248\u672c 2.1. \u4e2d\u65b0\u589e class UserResource ( ModelResource ): model = User schema = UserSchema filters = [ { 'username' : str }, { 'age' : Optional [ str ]}, ] # yapf: disable permission_classes = [ IsAuthenticated ]","title":"ModelResource"},{"location":"zh/docs/schema/","text":"Schema model_to_schema # generate pydantic schema from models # `User` is a db.Model or db.BaseModel instance from bali.schemas import model_to_schema UserSchema = model_to_schema ( User )","title":"Schema"},{"location":"zh/docs/schema/#schema","text":"model_to_schema # generate pydantic schema from models # `User` is a db.Model or db.BaseModel instance from bali.schemas import model_to_schema UserSchema = model_to_schema ( User )","title":"Schema"},{"location":"zh/docs/testing/","text":"Testing gRPC service tests from bali.tests import GRPCTestBase from service.demo import demo_service , demo_pb2 , demo_pb2_grpc class TestDemoRPC ( GRPCTestBase ): server_class = demo_service . DemoService # Provided service pb2 = demo_pb2 # Provided pb2 pb2_grpc = demo_pb2_grpc # Provided pb2 grpc def setup_method ( self ): # Pytest setup pass def teardown_method ( self ): # Pytest teardown pass def test_demo ( self ): pass","title":"Testing"},{"location":"zh/docs/testing/#testing","text":"gRPC service tests from bali.tests import GRPCTestBase from service.demo import demo_service , demo_pb2 , demo_pb2_grpc class TestDemoRPC ( GRPCTestBase ): server_class = demo_service . DemoService # Provided service pb2 = demo_pb2 # Provided pb2 pb2_grpc = demo_pb2_grpc # Provided pb2 grpc def setup_method ( self ): # Pytest setup pass def teardown_method ( self ): # Pytest teardown pass def test_demo ( self ): pass","title":"Testing"},{"location":"zh/docs/utility/","text":"Utils dateparser dateparser docs MessageToDict/ParseDict Optimized MessageToDict/ParseDict from google.protobuf.js_format from bali.utils import MessageToDict , ParseDict","title":"Utils"},{"location":"zh/docs/utility/#utils","text":"dateparser dateparser docs MessageToDict/ParseDict Optimized MessageToDict/ParseDict from google.protobuf.js_format from bali.utils import MessageToDict , ParseDict","title":"Utils"}]}